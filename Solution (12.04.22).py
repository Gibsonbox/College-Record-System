import sys
import csv
import pandas as pd
from pandas.core.indexes.base import Index


#First function that is called and verifies the user is authorised.
def password_Check():
    correct_Password = 'Pa55word'
    #Counter created to allow a set number of attempts in a session.
    x = 0
    while x < 3:
        input_Password = input("Please enter the password... ")
        print('\n')
        if input_Password == correct_Password:
            print("Welcome, Admin.")
            print("\n")
            purpose()
        else:
            print("You entered the incorrect password.")
            print("\n")
            x+=1
            
    sys.exit()

#This funtion asks the user what process they want to use the application for.
#This function is called again after a process has finished to ask the user again.
def purpose():
    print("What is the purpose of running this application today?")
    print('\n')
    y=0
    while y < 1:
        app_Purpose = input("Please enter 'Enrol', 'Stats', or 'Exit': ")
        print('\n')
        if app_Purpose == 'Stats' or app_Purpose == 'stats':
            y+=1
            stats()
        elif app_Purpose == 'Enrol' or app_Purpose == 'enrol':
            y+=1
            enrol()
        elif app_Purpose == 'Exit' or app_Purpose == 'exit':
            sys.exit()
        else:
            print("That is not what I asked you. Please try again.")
            print('\n')

#The function which deals with calculating values and optionally printing them to the console
#or exporting them to the College Data CSV file.
def stats():
    z=0
    total_Income = 0
    print("You have chosen the statistics option.")
    print('\n')

    #Prints the entire stats data that the calculations will be working from
    read_df = pd.read_csv(r'College Data.csv')
    print(read_df)
    print("\n")

    #Stats creation into variables to be printed or exported
    mean_Course_Cost = read_df['Course Price GBP'].mean()
    median_Course_Cost = read_df['Course Price GBP'].median()

    sum_Student_Population = read_df['Course Population'].sum()
    number_Of_Courses = read_df['Course Name'].count()
    mean_Student_Population = (sum_Student_Population/number_Of_Courses)

    median_Student_Population = read_df['Course Population'].median()

    #The total income of the college is generated below
    for i in range (number_Of_Courses):
        singular_Course_Population = read_df.loc[i, 'Course Population']
        singular_Course_Price = read_df.loc[i, 'Course Price GBP']
        singular_Course_Income = (singular_Course_Population * singular_Course_Price)
        total_Income += singular_Course_Income

    #Decision to print the result to the console window or the CSV file
    print("Would you like to print the statistical calculations to the console, or export to the MoL data?")
    while z < 1:
        #Check decision through user input
        print_Or_Export = input("Enter either 'Print' or 'Export'. ")
        print("\n")
        if print_Or_Export == 'Print' or print_Or_Export == 'print':
            #This next chunk will print the values to the console 
            print("The total number of students enrolled in the college is: " + str(sum_Student_Population))
            print("\n")
            print("The total income generated by the college (GBP) is: " + str(total_Income))
            print("\n")
            print("The mean course cost (GBP) is: " + str(mean_Course_Cost))
            print("\n")
            print("The median course cost (GBP) is: " + str(median_Course_Cost))
            print("\n")
            print("The mean student population is: " + str(mean_Student_Population))
            print("\n")
            print("The median student population is: " + str(median_Student_Population))
            print("\n")
            z+=1
        elif print_Or_Export == 'Export' or print_Or_Export == 'export':
            #This chunk will export the data to the MoL Data CSV file
            read_Export_df = pd.read_csv(r'MoL Data.csv')
            MoL_Version = int(read_Export_df['MoL Version'].count())+1
            export_df = pd.DataFrame({'Mean Course Cost': [mean_Course_Cost], 'Median Course Cost': [median_Course_Cost], 'Mean Student Population': [mean_Student_Population],
                                     'Median Student Population': [median_Student_Population], 'Total Student Population': [sum_Student_Population], 
                                     'Total Income GBP': [total_Income], 'MoL Version': [MoL_Version]})
            export_df.to_csv('MoL Data.csv', mode='a', index=False, header=False)
            print("The data has been exported to MoL Data")
            z+=1
        else:
            print("That is not what I asked, please try again.")
    #Stats function has been carried out and returns the user to the puprose function
    purpose()

#This function deals with student enrolment into the college system.
def enrol():
    counter = 0
    print("You have chosen the enrolment option.")
    print('\n')
    #Student Data CSV file and College Data CSV file are opened into memory to be used
    enrol_Read_df = pd.read_csv(r'Student Data.csv')
    read_df = pd.read_csv(r'College Data.csv')

    #Student ID is created based on data from Student Data CSV
    student_ID = (int(enrol_Read_df['Student ID'].count())+1)

    #User must enter data as entries to the Student Data CSV file
    first_Name = input("Enter the new student's first name: ")
    print("\n")
    last_Name = input("Enter the new student's last name: ")
    print("\n")
    phone_Number = input("Enter the new student's phone number: ")
    print("\n")
    #Loop created to ensure that the entered course is an existing one
    number_Of_Courses = read_df['Course Name'].count()
    while counter < 1:
        course_Name = input("Enter the course they wish to sign on to: ")
        print("\n")
        for i in range (number_Of_Courses):
            if course_Name == read_df.loc[i, 'Course Name']:
                print("\n")
                counter = 1
                break
            else:
                print("That isn't an available course.")
                print("\n")
                break


    #Once the course name check has been carried out the data can be saved to the CSV files
    enrol_Append_df = pd.DataFrame({'First Name': [first_Name], 'Last Name': [last_Name], 'Phone Number': [phone_Number], 'Student ID': [student_ID], 'Course Name': [course_Name]})
    enrol_Append_df.to_csv('Student Data.csv', header=False, mode='a', index=False)

    #The specific course population numbers need to be updated for that course hence the below checks
    if course_Name == 'Business Admin' or course_Name == 'business admin':

        course_Population = (read_df.loc[0,'Course Population']+1)
        read_df.loc[[0], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    elif course_Name == 'HR' or course_Name == 'hr':

        course_Population = (read_df.loc[1,'Course Population']+1)
        read_df.loc[[1], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    elif course_Name == 'IT Level 2' or course_Name == 'it level 2':

        course_Population = (read_df.loc[2,'Course Population']+1)
        read_df.loc[[2], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    elif course_Name == 'IT Level 3' or course_Name == 'it level 3':

        course_Population = (read_df.loc[3,'Course Population']+1)
        read_df.loc[[3], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    elif course_Name == 'Medical Secretary' or course_Name == 'medical secretary':

        course_Population = (read_df.loc[4,'Course Population']+1)
        read_df.loc[[4], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    elif course_Name == 'Shorthand' or course_Name == 'shorthand':

        course_Population = (read_df.loc[5,'Course Population']+1)
        read_df.loc[[5], ['Course Population']] = course_Population
        read_df.to_csv('College Data.csv', mode='w', index=False)

    #Enrolment confirmation and calling the purpose function to return to main menu
    print("The student has been enrolled into the college.")
    print("\n")
    purpose()


password_Check()
